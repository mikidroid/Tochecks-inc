{"ast":null,"code":"import { ClickEvent } from \"./ClickEvent\";\nimport { DivEvent } from \"./DivEvent\";\nimport { HoverEvent } from \"./HoverEvent\";\nexport class Events {\n  constructor() {\n    this.onClick = new ClickEvent();\n    this.onDiv = new DivEvent();\n    this.onHover = new HoverEvent();\n    this.resize = true;\n  }\n  get onclick() {\n    return this.onClick;\n  }\n  set onclick(value) {\n    this.onClick = value;\n  }\n  get ondiv() {\n    return this.onDiv;\n  }\n  set ondiv(value) {\n    this.onDiv = value;\n  }\n  get onhover() {\n    return this.onHover;\n  }\n  set onhover(value) {\n    this.onHover = value;\n  }\n  load(data) {\n    var _a, _b, _c;\n    if (data === undefined) {\n      return;\n    }\n    this.onClick.load((_a = data.onClick) !== null && _a !== void 0 ? _a : data.onclick);\n    const onDiv = (_b = data.onDiv) !== null && _b !== void 0 ? _b : data.ondiv;\n    if (onDiv !== undefined) {\n      if (onDiv instanceof Array) {\n        this.onDiv = onDiv.map(div => {\n          const tmp = new DivEvent();\n          tmp.load(div);\n          return tmp;\n        });\n      } else {\n        this.onDiv = new DivEvent();\n        this.onDiv.load(onDiv);\n      }\n    }\n    this.onHover.load((_c = data.onHover) !== null && _c !== void 0 ? _c : data.onhover);\n    if (data.resize !== undefined) {\n      this.resize = data.resize;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}