{"ast":null,"code":"import { Vector } from \"./Vector\";\nexport class Vector3d extends Vector {\n  constructor(xOrCoords, y, z) {\n    super(xOrCoords, y);\n    if (typeof xOrCoords !== \"number\" && xOrCoords) {\n      this.z = xOrCoords.z;\n    } else if (z !== undefined) {\n      this.z = z;\n    } else {\n      throw new Error(\"tsParticles - Vector not initialized correctly\");\n    }\n  }\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n  static get origin() {\n    return Vector3d.create(0, 0, 0);\n  }\n  add(v) {\n    return v instanceof Vector3d ? Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z) : super.add(v);\n  }\n  addTo(v) {\n    super.addTo(v);\n    if (v instanceof Vector3d) {\n      this.z += v.z;\n    }\n  }\n  sub(v) {\n    return v instanceof Vector3d ? Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z) : super.sub(v);\n  }\n  subFrom(v) {\n    super.subFrom(v);\n    if (v instanceof Vector3d) {\n      this.z -= v.z;\n    }\n  }\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n  multTo(n) {\n    super.multTo(n);\n    this.z *= n;\n  }\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n  divTo(n) {\n    super.divTo(n);\n    this.z /= n;\n  }\n  copy() {\n    return Vector3d.clone(this);\n  }\n  setTo(v) {\n    super.setTo(v);\n    const v3d = v;\n    if (v3d.z !== undefined) {\n      this.z = v3d.z;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}