{"ast":null,"code":"import { colorToHsl, getStyleFromHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nexport class TwinkleUpdater {\n  getColorStyles(particle, context, radius, opacity) {\n    const pOptions = particle.options,\n      twinkle = pOptions.twinkle.particles,\n      twinkling = twinkle.enable && Math.random() < twinkle.frequency,\n      zIndexOptions = particle.options.zIndex,\n      zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n      twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n      twinkleRgb = colorToHsl(twinkle.color),\n      twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n      res = {},\n      needsTwinkle = twinkling && twinkleStyle;\n    res.fill = needsTwinkle ? twinkleStyle : undefined;\n    res.stroke = needsTwinkle ? twinkleStyle : undefined;\n    return res;\n  }\n  init() {}\n  isEnabled(particle) {\n    return particle.options.twinkle.particles.enable;\n  }\n  update() {}\n}","map":null,"metadata":{},"sourceType":"module"}