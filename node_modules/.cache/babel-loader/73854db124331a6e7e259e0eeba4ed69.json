{"ast":null,"code":"import { colorToHsl, getHslAnimationFromHsl } from \"../../Utils/ColorUtils\";\nimport { itemFromArray } from \"../../Utils/Utils\";\nimport { randomInRange } from \"../../Utils/NumberUtils\";\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n  var _a;\n  const colorValue = value;\n  if (!colorValue || !colorValue.enable) {\n    return;\n  }\n  const offset = randomInRange(valueAnimation.offset);\n  const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n  if (!decrease || colorValue.status === 0) {\n    colorValue.value += velocity;\n    if (decrease && colorValue.value > max) {\n      colorValue.status = 1;\n      colorValue.value -= colorValue.value % max;\n    }\n  } else {\n    colorValue.value -= velocity;\n    if (colorValue.value < 0) {\n      colorValue.status = 0;\n      colorValue.value += colorValue.value;\n    }\n  }\n  if (colorValue.value > max) {\n    colorValue.value %= max;\n  }\n}\nfunction updateStrokeColor(particle, delta) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  if (!((_a = particle.stroke) === null || _a === void 0 ? void 0 : _a.color)) {\n    return;\n  }\n  const animationOptions = particle.stroke.color.animation;\n  const h = (_c = (_b = particle.strokeColor) === null || _b === void 0 ? void 0 : _b.h) !== null && _c !== void 0 ? _c : (_d = particle.color) === null || _d === void 0 ? void 0 : _d.h;\n  if (h) {\n    updateColorValue(delta, h, animationOptions.h, 360, false);\n  }\n  const s = (_f = (_e = particle.strokeColor) === null || _e === void 0 ? void 0 : _e.s) !== null && _f !== void 0 ? _f : (_g = particle.color) === null || _g === void 0 ? void 0 : _g.s;\n  if (s) {\n    updateColorValue(delta, s, animationOptions.s, 100, true);\n  }\n  const l = (_j = (_h = particle.strokeColor) === null || _h === void 0 ? void 0 : _h.l) !== null && _j !== void 0 ? _j : (_k = particle.color) === null || _k === void 0 ? void 0 : _k.l;\n  if (l) {\n    updateColorValue(delta, l, animationOptions.l, 100, true);\n  }\n}\nexport class StrokeColorUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    var _a, _b;\n    const container = this.container;\n    particle.stroke = particle.options.stroke instanceof Array ? itemFromArray(particle.options.stroke, particle.id, particle.options.reduceDuplicates) : particle.options.stroke;\n    particle.strokeWidth = particle.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_a = colorToHsl(particle.stroke.color)) !== null && _a !== void 0 ? _a : particle.getFillColor();\n    if (strokeHslColor) {\n      particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, (_b = particle.stroke.color) === null || _b === void 0 ? void 0 : _b.animation, container.retina.reduceFactor);\n    }\n  }\n  isEnabled(particle) {\n    var _a, _b, _c, _d;\n    const color = (_a = particle.stroke) === null || _a === void 0 ? void 0 : _a.color;\n    return !particle.destroyed && !particle.spawning && !!color && (((_b = particle.strokeColor) === null || _b === void 0 ? void 0 : _b.h.value) !== undefined && color.animation.h.enable || ((_c = particle.strokeColor) === null || _c === void 0 ? void 0 : _c.s.value) !== undefined && color.animation.s.enable || ((_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.l.value) !== undefined && color.animation.l.enable);\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateStrokeColor(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}