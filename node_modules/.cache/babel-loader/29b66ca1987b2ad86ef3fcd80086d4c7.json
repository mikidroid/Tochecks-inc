{"ast":null,"code":"import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nexport class CircleWarp extends Circle {\n  constructor(x, y, radius, canvasSize) {\n    super(x, y, radius);\n    this.canvasSize = canvasSize;\n    this.canvasSize = Object.assign({}, canvasSize);\n  }\n  contains(point) {\n    if (super.contains(point)) {\n      return true;\n    }\n    const posNE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y\n    };\n    if (super.contains(posNE)) {\n      return true;\n    }\n    const posSE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y - this.canvasSize.height\n    };\n    if (super.contains(posSE)) {\n      return true;\n    }\n    const posSW = {\n      x: point.x,\n      y: point.y - this.canvasSize.height\n    };\n    return super.contains(posSW);\n  }\n  intersects(range) {\n    if (super.intersects(range)) {\n      return true;\n    }\n    const rect = range,\n      circle = range,\n      newPos = {\n        x: range.position.x - this.canvasSize.width,\n        y: range.position.y - this.canvasSize.height\n      };\n    if (circle.radius !== undefined) {\n      const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n      return super.intersects(biggerCircle);\n    } else if (rect.size !== undefined) {\n      const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n      return super.intersects(rectSW);\n    }\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}