{"ast":null,"code":"import { ParticlesInteractorBase } from \"../../../Core/Utils/ParticlesInteractorBase\";\nimport { getDistances } from \"../../../Utils/NumberUtils\";\nexport class Attractor extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  async interact(p1) {\n    var _a;\n    const container = this.container,\n      distance = (_a = p1.retina.attractDistance) !== null && _a !== void 0 ? _a : container.retina.attractDistance,\n      pos1 = p1.getPosition(),\n      query = container.particles.quadTree.queryCircle(pos1, distance);\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n        continue;\n      }\n      const pos2 = p2.getPosition(),\n        {\n          dx,\n          dy\n        } = getDistances(pos1, pos2),\n        rotate = p1.options.move.attract.rotate,\n        ax = dx / (rotate.x * 1000),\n        ay = dy / (rotate.y * 1000),\n        p1Factor = p2.size.value / p1.size.value,\n        p2Factor = 1 / p1Factor;\n      p1.velocity.x -= ax * p1Factor;\n      p1.velocity.y -= ay * p1Factor;\n      p2.velocity.x += ax * p2Factor;\n      p2.velocity.y += ay * p2Factor;\n    }\n  }\n  isEnabled(particle) {\n    return particle.options.move.attract.enable;\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module"}