{"ast":null,"code":"import { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateWobble(particle, delta) {\n  var _a;\n  const wobble = particle.options.wobble;\n  if (!wobble.enable || !particle.wobble) {\n    return;\n  }\n  const speed = particle.wobble.speed * delta.factor;\n  const distance = ((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor / (1000 / 60);\n  const max = 2 * Math.PI;\n  particle.wobble.angle += speed;\n  if (particle.wobble.angle > max) {\n    particle.wobble.angle -= max;\n  }\n  particle.position.x += distance * Math.cos(particle.wobble.angle);\n  particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n}\nexport class WobbleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    const wobbleOpt = particle.options.wobble;\n    if (wobbleOpt.enable) {\n      particle.wobble = {\n        angle: Math.random() * Math.PI * 2,\n        speed: getRangeValue(wobbleOpt.speed) / 360\n      };\n    } else {\n      particle.wobble = {\n        angle: 0,\n        speed: 0\n      };\n    }\n    particle.retina.wobbleDistance = getRangeValue(wobbleOpt.distance) * this.container.retina.pixelRatio;\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning && particle.options.wobble.enable;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateWobble(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}