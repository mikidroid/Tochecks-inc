{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _Plugins_engine;\nexport class Plugins {\n  constructor(engine) {\n    _Plugins_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Plugins_engine, engine, \"f\");\n    this.plugins = [];\n    this.interactorsInitializers = new Map();\n    this.moversInitializers = new Map();\n    this.updatersInitializers = new Map();\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n  getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  addPreset(presetKey, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (override || !this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n  addShapeDrawer(type, drawer) {\n    if (!this.getShapeDrawer(type)) {\n      this.drawers.set(type, drawer);\n    }\n  }\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  addPathGenerator(type, pathGenerator) {\n    if (!this.getPathGenerator(type)) {\n      this.pathGenerators.set(type, pathGenerator);\n    }\n  }\n  getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.interactors.get(container);\n    if (!res || force) {\n      res = [...this.interactorsInitializers.values()].map(t => t(container));\n      this.interactors.set(container, res);\n    }\n    return res;\n  }\n  addInteractor(name, initInteractor) {\n    this.interactorsInitializers.set(name, initInteractor);\n  }\n  getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.updaters.get(container);\n    if (!res || force) {\n      res = [...this.updatersInitializers.values()].map(t => t(container));\n      this.updaters.set(container, res);\n    }\n    return res;\n  }\n  addParticleUpdater(name, initUpdater) {\n    this.updatersInitializers.set(name, initUpdater);\n  }\n  getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.movers.get(container);\n    if (!res || force) {\n      res = [...this.moversInitializers.values()].map(t => t(container));\n      this.movers.set(container, res);\n    }\n    return res;\n  }\n  addParticleMover(name, initMover) {\n    this.moversInitializers.set(name, initMover);\n  }\n}\n_Plugins_engine = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}