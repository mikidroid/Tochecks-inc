{"ast":null,"code":"import { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateAngle(particle, delta) {\n  var _a;\n  const rotate = particle.rotate;\n  if (!rotate) {\n    return;\n  }\n  const rotateOptions = particle.options.rotate;\n  const rotateAnimation = rotateOptions.animation;\n  const speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  const max = 2 * Math.PI;\n  if (!rotateAnimation.enable) {\n    return;\n  }\n  switch (rotate.status) {\n    case 0:\n      rotate.value += speed;\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n      break;\n    case 1:\n    default:\n      rotate.value -= speed;\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n      break;\n  }\n}\nexport class AngleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    const rotateOptions = particle.options.rotate;\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n    if (rotateDirection === \"random\") {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n    switch (rotateDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.rotate.status = 1;\n        break;\n      case \"clockwise\":\n        particle.rotate.status = 0;\n        break;\n    }\n    const rotateAnimation = particle.options.rotate.animation;\n    if (rotateAnimation.enable) {\n      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= Math.random();\n      }\n    }\n  }\n  isEnabled(particle) {\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateAngle(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}