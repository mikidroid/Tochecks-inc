{"ast":null,"code":"import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, itemFromArray } from \"../../Utils/Utils\";\nimport { getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { Constants } from \"../../Core/Utils/Constants\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n  resize() {\n    const container = this.container,\n      options = this.options;\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n  particlesInitialization() {\n    const options = this.options;\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n    return false;\n  }\n  particlePosition(position) {\n    var _a, _b;\n    const options = this.options;\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n    return deepExtend({}, position ? position : this.randomPoint());\n  }\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n  draw(context) {\n    var _a;\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    const options = this.options,\n      polygonDraw = options.draw;\n    if (!options.enable || !polygonDraw.enable) {\n      return;\n    }\n    const rawData = this.raw;\n    for (const path of this.paths) {\n      const path2d = path.path2d,\n        path2dSupported = this.path2DSupported;\n      if (!context) {\n        continue;\n      }\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n        radius = particle.getRadius();\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n          pj = this.raw[j];\n        closest = calcClosestPtOnSegment(pi, pj, pos);\n        const dist = getDistances(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n        if (dist.distance < radius) {\n          segmentBounce(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = getDistance(particle.initialPosition, particle.getPosition());\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n    return false;\n  }\n  checkInsidePolygon(position) {\n    var _a, _b;\n    const container = this.container,\n      options = this.options;\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n    if (!this.raw) {\n      throw new Error(Constants.noPolygonFound);\n    }\n    const canvasSize = container.canvas.size,\n      x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n      y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i],\n        pj = this.raw[j],\n        intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const container = this.container,\n      options = this.options,\n      parser = new DOMParser(),\n      doc = parser.parseFromString(xml, \"image/svg+xml\"),\n      svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n    this.paths = [];\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n    const pxRatio = container.retina.pixelRatio,\n      scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options,\n      url = svgUrl || options.url,\n      forceDownload = force !== null && force !== void 0 ? force : false;\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const req = await fetch(url);\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n    return this.parseSvgPath(await req.text(), force);\n  }\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n  randomPoint() {\n    const container = this.container,\n      options = this.options;\n    let position;\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const coords = itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  getRandomPointByLength() {\n    var _a, _b, _c;\n    const options = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const path = itemFromArray(this.paths),\n      distance = Math.floor(Math.random() * path.length) + 1,\n      point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const options = this.container.actualOptions,\n      polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n    let offset = 0,\n      point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0),\n      distance = totalLength / options.particles.number.value;\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  createPath2D() {\n    var _a, _b;\n    const options = this.options;\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n      if (pathData) {\n        const path2d = new Path2D(pathData),\n          matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n          finalPath = new Path2D(),\n          transform = matrix.scale(options.scale);\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n  async initRawData(force) {\n    const options = this.options;\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n      this.raw = this.parseSvgPath(svg, force);\n    }\n    this.createPath2D();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}