{"ast":null,"code":"import { calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, rectBounce } from \"../../../Utils/Utils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Rectangle } from \"../../../Core/Utils/Rectangle\";\nimport { Vector } from \"../../../Core/Utils/Vector\";\nexport class Bouncer extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  isEnabled() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = options.interactivity.events,\n      divs = events.onDiv;\n    return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n  }\n  async interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      events = options.interactivity.events,\n      mouseMoveStatus = container.interactivity.status === Constants.mouseMoveEvent,\n      hoverEnabled = events.onHover.enable,\n      hoverMode = events.onHover.mode,\n      divs = events.onDiv;\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n      this.processMouseBounce();\n    } else {\n      divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n    }\n  }\n  reset() {}\n  processMouseBounce() {\n    const container = this.container,\n      pxRatio = container.retina.pixelRatio,\n      tolerance = 10 * pxRatio,\n      mousePos = container.interactivity.mouse.position,\n      radius = container.retina.bounceModeDistance;\n    if (mousePos) {\n      this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n    }\n  }\n  singleSelectorBounce(selector, div) {\n    const container = this.container,\n      query = document.querySelectorAll(selector);\n    if (!query.length) {\n      return;\n    }\n    query.forEach(item => {\n      const elem = item,\n        pxRatio = container.retina.pixelRatio,\n        pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n        radius = elem.offsetWidth / 2 * pxRatio,\n        tolerance = 10 * pxRatio,\n        area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n      this.processBounce(pos, radius, area);\n    });\n  }\n  processBounce(position, radius, area) {\n    const query = this.container.particles.quadTree.query(area);\n    for (const particle of query) {\n      if (area instanceof Circle) {\n        circleBounce(circleBounceDataFromParticle(particle), {\n          position,\n          radius,\n          mass: radius ** 2 * Math.PI / 2,\n          velocity: Vector.origin,\n          factor: Vector.origin\n        });\n      } else if (area instanceof Rectangle) {\n        rectBounce(particle, calculateBounds(position, radius));\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}