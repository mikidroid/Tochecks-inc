{"ast":null,"code":"import { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateTilt(particle, delta) {\n  var _a;\n  if (!particle.tilt) {\n    return;\n  }\n  const tilt = particle.options.tilt;\n  const tiltAnimation = tilt.animation;\n  const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  const max = 2 * Math.PI;\n  if (!tiltAnimation.enable) {\n    return;\n  }\n  switch (particle.tilt.status) {\n    case 0:\n      particle.tilt.value += speed;\n      if (particle.tilt.value > max) {\n        particle.tilt.value -= max;\n      }\n      break;\n    case 1:\n    default:\n      particle.tilt.value -= speed;\n      if (particle.tilt.value < 0) {\n        particle.tilt.value += max;\n      }\n      break;\n  }\n}\nexport class TiltUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    const tiltOptions = particle.options.tilt;\n    particle.tilt = {\n      enable: tiltOptions.enable,\n      value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n    if (tiltDirection === \"random\") {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n    switch (tiltDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.tilt.status = 1;\n        break;\n      case \"clockwise\":\n        particle.tilt.status = 0;\n        break;\n    }\n    const tiltAnimation = particle.options.tilt.animation;\n    if (tiltAnimation.enable) {\n      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        particle.tilt.velocity *= Math.random();\n      }\n    }\n  }\n  isEnabled(particle) {\n    const tilt = particle.options.tilt;\n    const tiltAnimation = tilt.animation;\n    return !particle.destroyed && !particle.spawning && tiltAnimation.enable;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateTilt(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}