{"ast":null,"code":"import { colorToHsl } from \"../../Utils/ColorUtils\";\nimport { getRangeValue } from \"../../Utils/NumberUtils\";\nfunction updateRoll(particle, delta) {\n  const roll = particle.options.roll;\n  if (!particle.roll || !roll.enable) {\n    return;\n  }\n  const speed = particle.roll.speed * delta.factor;\n  const max = 2 * Math.PI;\n  particle.roll.angle += speed;\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\nexport class RollUpdater {\n  init(particle) {\n    const rollOpt = particle.options.roll;\n    if (rollOpt.enable) {\n      particle.roll = {\n        angle: Math.random() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360\n      };\n      if (rollOpt.backColor) {\n        particle.backColor = colorToHsl(rollOpt.backColor);\n      } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = Math.random() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n          type: alterType,\n          value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n        };\n      } else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n          type: \"darken\",\n          value: getRangeValue(rollOpt.darken.value)\n        };\n      } else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n          type: \"enlighten\",\n          value: getRangeValue(rollOpt.enlighten.value)\n        };\n      }\n    } else {\n      particle.roll = {\n        angle: 0,\n        speed: 0\n      };\n    }\n  }\n  isEnabled(particle) {\n    const roll = particle.options.roll;\n    return !particle.destroyed && !particle.spawning && roll.enable;\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateRoll(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}