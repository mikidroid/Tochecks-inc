{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _eventemitter = require('eventemitter3');\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar MarkerDispatcher = function (_EventEmitter) {\n  _inherits(MarkerDispatcher, _EventEmitter);\n  function MarkerDispatcher(gmapInstance) {\n    _classCallCheck(this, MarkerDispatcher);\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n    _this.gmapInstance = gmapInstance;\n    return _this;\n  }\n  MarkerDispatcher.prototype.getChildren = function getChildren() {\n    return this.gmapInstance.props.children;\n  };\n  MarkerDispatcher.prototype.getMousePosition = function getMousePosition() {\n    return this.gmapInstance.mouse_;\n  };\n  MarkerDispatcher.prototype.getUpdateCounter = function getUpdateCounter() {\n    return this.gmapInstance.updateCounter_;\n  };\n  MarkerDispatcher.prototype.dispose = function dispose() {\n    this.gmapInstance = null;\n    this.removeAllListeners();\n  };\n  return MarkerDispatcher;\n}(_eventemitter2.default);\nexports.default = MarkerDispatcher;","map":null,"metadata":{},"sourceType":"script"}