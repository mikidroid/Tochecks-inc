{"ast":null,"code":"import { colorToRgb, getLinkColor } from \"../../../Utils/ColorUtils\";\nimport { drawLinkLine, drawLinkTriangle } from \"../../../Utils/CanvasUtils\";\nimport { getDistance, getRangeValue } from \"../../../Utils/NumberUtils\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n  }\n  particleCreated(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n  particleDestroyed(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n  drawParticle(context, particle) {\n    const linkParticle = particle,\n      container = this.container,\n      particles = container.particles,\n      pOptions = particle.options;\n    if (linkParticle.links.length <= 0) {\n      return;\n    }\n    context.save();\n    const p1Links = linkParticle.links.filter(l => {\n      const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n      return linkFreq <= pOptions.links.frequency;\n    });\n    for (const link of p1Links) {\n      const p2 = link.destination;\n      if (pOptions.links.triangles.enable) {\n        const links = p1Links.map(l => l.destination),\n          vertices = p2.links.filter(t => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n          });\n        if (vertices.length) {\n          for (const vertex of vertices) {\n            const p3 = vertex.destination,\n              triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n            if (triangleFreq > pOptions.links.triangles.frequency) {\n              continue;\n            }\n            this.drawLinkTriangle(linkParticle, link, vertex);\n          }\n        }\n      }\n      if (link.opacity > 0 && container.retina.linksWidth > 0) {\n        this.drawLinkLine(linkParticle, link);\n      }\n    }\n    context.restore();\n  }\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link1.destination,\n      p3 = link2.destination,\n      triangleOptions = p1.options.links.triangles,\n      opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    if (opacityTriangle <= 0) {\n      return;\n    }\n    const pos1 = p1.getPosition(),\n      pos2 = p2.getPosition(),\n      pos3 = p3.getPosition();\n    container.canvas.draw(ctx => {\n      if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n        return;\n      }\n      let colorTriangle = colorToRgb(triangleOptions.color);\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n          linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorTriangle) {\n        return;\n      }\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n  drawLinkLine(p1, link) {\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link.destination,\n      pos1 = p1.getPosition(),\n      pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b;\n      let colorLine;\n      const twinkle = p1.options.twinkle.lines;\n      if (twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n          twinkleRgb = colorToRgb(twinkle.color),\n          twinkling = Math.random() < twinkleFreq;\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n          linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorLine) {\n        return;\n      }\n      const width = (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth,\n        maxDistance = (_b = p1.retina.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}