{"ast":null,"code":"import { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nimport { isInArray } from \"../../Utils/Utils\";\nclass AbsorbersPlugin {\n  constructor() {\n    this.id = \"absorbers\";\n  }\n  getPlugin(container) {\n    return new Absorbers(container);\n  }\n  needsPlugin(options) {\n    var _a, _b, _c;\n    if (options === undefined) {\n      return false;\n    }\n    const absorbers = options.absorbers;\n    if (absorbers instanceof Array) {\n      return !!absorbers.length;\n    } else if (absorbers) {\n      return true;\n    } else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n      return true;\n    }\n    return false;\n  }\n  loadOptions(options, source) {\n    var _a, _b;\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n    const optionsCast = options;\n    if (source === null || source === void 0 ? void 0 : source.absorbers) {\n      if ((source === null || source === void 0 ? void 0 : source.absorbers) instanceof Array) {\n        optionsCast.absorbers = source === null || source === void 0 ? void 0 : source.absorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let absorberOptions = optionsCast.absorbers;\n        if ((absorberOptions === null || absorberOptions === void 0 ? void 0 : absorberOptions.load) === undefined) {\n          optionsCast.absorbers = absorberOptions = new Absorber();\n        }\n        absorberOptions.load(source === null || source === void 0 ? void 0 : source.absorbers);\n      }\n    }\n    const interactivityAbsorbers = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n    if (interactivityAbsorbers) {\n      if (interactivityAbsorbers instanceof Array) {\n        optionsCast.interactivity.modes.absorbers = interactivityAbsorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let absorberOptions = optionsCast.interactivity.modes.absorbers;\n        if ((absorberOptions === null || absorberOptions === void 0 ? void 0 : absorberOptions.load) === undefined) {\n          optionsCast.interactivity.modes.absorbers = absorberOptions = new Absorber();\n        }\n        absorberOptions.load(interactivityAbsorbers);\n      }\n    }\n  }\n}\nexport async function loadAbsorbersPlugin(engine) {\n  const plugin = new AbsorbersPlugin();\n  await engine.addPlugin(plugin);\n}\nexport * from \"./Enums/AbsorberClickMode\";\nexport * from \"./Options/Interfaces/IAbsorberOptions\";","map":null,"metadata":{},"sourceType":"module"}