{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _InteractionManager_engine;\nexport class InteractionManager {\n  constructor(engine, container) {\n    this.container = container;\n    _InteractionManager_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _InteractionManager_engine, engine, \"f\");\n    this.externalInteractors = [];\n    this.particleInteractors = [];\n    this.init();\n  }\n  init() {\n    const interactors = __classPrivateFieldGet(this, _InteractionManager_engine, \"f\").plugins.getInteractors(this.container, true);\n    this.externalInteractors = [];\n    this.particleInteractors = [];\n    for (const interactor of interactors) {\n      switch (interactor.type) {\n        case 0:\n          this.externalInteractors.push(interactor);\n          break;\n        case 1:\n          this.particleInteractors.push(interactor);\n          break;\n      }\n    }\n  }\n  async externalInteract(delta) {\n    for (const interactor of this.externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.interact(delta);\n      }\n    }\n  }\n  async particlesInteract(particle, delta) {\n    for (const interactor of this.externalInteractors) {\n      interactor.reset(particle);\n    }\n    for (const interactor of this.particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.interact(particle, delta);\n      }\n    }\n  }\n  handleClickMode(mode) {\n    for (const interactor of this.externalInteractors) {\n      if (interactor.handleClickMode) {\n        interactor.handleClickMode(mode);\n      }\n    }\n  }\n}\n_InteractionManager_engine = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}