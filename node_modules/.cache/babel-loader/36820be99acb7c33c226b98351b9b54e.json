{"ast":null,"code":"import { AnimatableColor } from \"../AnimatableColor\";\nimport { AnimatableGradient } from \"../AnimatableGradient\";\nimport { Bounce } from \"./Bounce/Bounce\";\nimport { Collisions } from \"./Collisions/Collisions\";\nimport { Destroy } from \"./Destroy/Destroy\";\nimport { Life } from \"./Life/Life\";\nimport { Links } from \"./Links/Links\";\nimport { Move } from \"./Move/Move\";\nimport { Opacity } from \"./Opacity/Opacity\";\nimport { Orbit } from \"./Orbit/Orbit\";\nimport { ParticlesNumber } from \"./Number/ParticlesNumber\";\nimport { Repulse } from \"./Repulse/Repulse\";\nimport { Roll } from \"./Roll/Roll\";\nimport { Rotate } from \"./Rotate/Rotate\";\nimport { Shadow } from \"./Shadow\";\nimport { Shape } from \"./Shape/Shape\";\nimport { Size } from \"./Size/Size\";\nimport { Stroke } from \"./Stroke\";\nimport { Tilt } from \"./Tilt/Tilt\";\nimport { Twinkle } from \"./Twinkle/Twinkle\";\nimport { Wobble } from \"./Wobble/Wobble\";\nimport { ZIndex } from \"./ZIndex/ZIndex\";\nimport { deepExtend } from \"../../../Utils/Utils\";\nexport class ParticlesOptions {\n  constructor() {\n    this.bounce = new Bounce();\n    this.collisions = new Collisions();\n    this.color = new AnimatableColor();\n    this.destroy = new Destroy();\n    this.gradient = [];\n    this.groups = {};\n    this.life = new Life();\n    this.links = new Links();\n    this.move = new Move();\n    this.number = new ParticlesNumber();\n    this.opacity = new Opacity();\n    this.orbit = new Orbit();\n    this.reduceDuplicates = false;\n    this.repulse = new Repulse();\n    this.roll = new Roll();\n    this.rotate = new Rotate();\n    this.shadow = new Shadow();\n    this.shape = new Shape();\n    this.size = new Size();\n    this.stroke = new Stroke();\n    this.tilt = new Tilt();\n    this.twinkle = new Twinkle();\n    this.wobble = new Wobble();\n    this.zIndex = new ZIndex();\n  }\n  get line_linked() {\n    return this.links;\n  }\n  set line_linked(value) {\n    this.links = value;\n  }\n  get lineLinked() {\n    return this.links;\n  }\n  set lineLinked(value) {\n    this.links = value;\n  }\n  load(data) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (data === undefined) {\n      return;\n    }\n    this.bounce.load(data.bounce);\n    this.color.load(AnimatableColor.create(this.color, data.color));\n    this.destroy.load(data.destroy);\n    this.life.load(data.life);\n    const links = (_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked;\n    if (links !== undefined) {\n      this.links.load(links);\n    }\n    if (data.groups !== undefined) {\n      for (const group in data.groups) {\n        const item = data.groups[group];\n        if (item !== undefined) {\n          this.groups[group] = deepExtend((_c = this.groups[group]) !== null && _c !== void 0 ? _c : {}, item);\n        }\n      }\n    }\n    this.move.load(data.move);\n    this.number.load(data.number);\n    this.opacity.load(data.opacity);\n    this.orbit.load(data.orbit);\n    if (data.reduceDuplicates !== undefined) {\n      this.reduceDuplicates = data.reduceDuplicates;\n    }\n    this.repulse.load(data.repulse);\n    this.roll.load(data.roll);\n    this.rotate.load(data.rotate);\n    this.shape.load(data.shape);\n    this.size.load(data.size);\n    this.shadow.load(data.shadow);\n    this.tilt.load(data.tilt);\n    this.twinkle.load(data.twinkle);\n    this.wobble.load(data.wobble);\n    this.zIndex.load(data.zIndex);\n    const collisions = (_e = (_d = data.move) === null || _d === void 0 ? void 0 : _d.collisions) !== null && _e !== void 0 ? _e : (_f = data.move) === null || _f === void 0 ? void 0 : _f.bounce;\n    if (collisions !== undefined) {\n      this.collisions.enable = collisions;\n    }\n    this.collisions.load(data.collisions);\n    const strokeToLoad = (_g = data.stroke) !== null && _g !== void 0 ? _g : (_h = data.shape) === null || _h === void 0 ? void 0 : _h.stroke;\n    if (strokeToLoad) {\n      if (strokeToLoad instanceof Array) {\n        this.stroke = strokeToLoad.map(s => {\n          const tmp = new Stroke();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.stroke instanceof Array) {\n          this.stroke = new Stroke();\n        }\n        this.stroke.load(strokeToLoad);\n      }\n    }\n    const gradientToLoad = data.gradient;\n    if (gradientToLoad) {\n      if (gradientToLoad instanceof Array) {\n        this.gradient = gradientToLoad.map(s => {\n          const tmp = new AnimatableGradient();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.gradient instanceof Array) {\n          this.gradient = new AnimatableGradient();\n        }\n        this.gradient.load(gradientToLoad);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}