{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Engine_initialized, _Engine_loader;\nimport { Loader } from \"./Core/Loader\";\nimport { Plugins } from \"./Core/Utils/Plugins\";\nexport class Engine {\n  constructor() {\n    _Engine_initialized.set(this, void 0);\n    _Engine_loader.set(this, void 0);\n    __classPrivateFieldSet(this, _Engine_initialized, false, \"f\");\n    this.domArray = [];\n    __classPrivateFieldSet(this, _Engine_loader, new Loader(this), \"f\");\n    this.plugins = new Plugins(this);\n  }\n  init() {\n    if (!__classPrivateFieldGet(this, _Engine_initialized, \"f\")) {\n      __classPrivateFieldSet(this, _Engine_initialized, true, \"f\");\n    }\n  }\n  async loadFromArray(tagId, options, index) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").load(tagId, options, index);\n  }\n  async load(tagId, options) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").load(tagId, options);\n  }\n  async set(id, element, options) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").set(id, element, options);\n  }\n  async loadJSON(tagId, pathConfigJson, index) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").loadJSON(tagId, pathConfigJson, index);\n  }\n  async setJSON(id, element, pathConfigJson, index) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").setJSON(id, element, pathConfigJson, index);\n  }\n  setOnClickHandler(callback) {\n    __classPrivateFieldGet(this, _Engine_loader, \"f\").setOnClickHandler(callback);\n  }\n  dom() {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").dom();\n  }\n  domItem(index) {\n    return __classPrivateFieldGet(this, _Engine_loader, \"f\").domItem(index);\n  }\n  async refresh() {\n    for (const instance of this.dom()) {\n      await instance.refresh();\n    }\n  }\n  async addShape(shape, drawer, init, afterEffect, destroy) {\n    let customDrawer;\n    if (typeof drawer === \"function\") {\n      customDrawer = {\n        afterEffect: afterEffect,\n        destroy: destroy,\n        draw: drawer,\n        init: init\n      };\n    } else {\n      customDrawer = drawer;\n    }\n    this.plugins.addShapeDrawer(shape, customDrawer);\n    await this.refresh();\n  }\n  async addPreset(preset, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.plugins.addPreset(preset, options, override);\n    await this.refresh();\n  }\n  async addPlugin(plugin) {\n    this.plugins.addPlugin(plugin);\n    await this.refresh();\n  }\n  async addPathGenerator(name, generator) {\n    this.plugins.addPathGenerator(name, generator);\n    await this.refresh();\n  }\n  async addInteractor(name, interactorInitializer) {\n    this.plugins.addInteractor(name, interactorInitializer);\n    await this.refresh();\n  }\n  async addMover(name, moverInitializer) {\n    this.plugins.addParticleMover(name, moverInitializer);\n    await this.refresh();\n  }\n  async addParticleUpdater(name, updaterInitializer) {\n    this.plugins.addParticleUpdater(name, updaterInitializer);\n    await this.refresh();\n  }\n}\n_Engine_initialized = new WeakMap(), _Engine_loader = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}