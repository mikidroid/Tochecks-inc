{"ast":null,"code":"import { Attract } from \"./Attract\";\nimport { MoveAngle } from \"./MoveAngle\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { OutModes } from \"./OutModes\";\nimport { Path } from \"./Path/Path\";\nimport { Spin } from \"./Spin\";\nimport { Trail } from \"./Trail\";\nimport { deepExtend } from \"../../../../Utils/Utils\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Move {\n  constructor() {\n    this.angle = new MoveAngle();\n    this.attract = new Attract();\n    this.decay = 0;\n    this.distance = {};\n    this.direction = \"none\";\n    this.drift = 0;\n    this.enable = false;\n    this.gravity = new MoveGravity();\n    this.path = new Path();\n    this.outModes = new OutModes();\n    this.random = false;\n    this.size = false;\n    this.speed = 2;\n    this.spin = new Spin();\n    this.straight = false;\n    this.trail = new Trail();\n    this.vibrate = false;\n    this.warp = false;\n  }\n  get collisions() {\n    return false;\n  }\n  set collisions(value) {}\n  get bounce() {\n    return this.collisions;\n  }\n  set bounce(value) {\n    this.collisions = value;\n  }\n  get out_mode() {\n    return this.outMode;\n  }\n  set out_mode(value) {\n    this.outMode = value;\n  }\n  get outMode() {\n    return this.outModes.default;\n  }\n  set outMode(value) {\n    this.outModes.default = value;\n  }\n  get noise() {\n    return this.path;\n  }\n  set noise(value) {\n    this.path = value;\n  }\n  load(data) {\n    var _a, _b, _c;\n    if (data === undefined) {\n      return;\n    }\n    if (data.angle !== undefined) {\n      if (typeof data.angle === \"number\") {\n        this.angle.value = data.angle;\n      } else {\n        this.angle.load(data.angle);\n      }\n    }\n    this.attract.load(data.attract);\n    if (data.decay !== undefined) {\n      this.decay = data.decay;\n    }\n    if (data.direction !== undefined) {\n      this.direction = data.direction;\n    }\n    if (data.distance !== undefined) {\n      this.distance = typeof data.distance === \"number\" ? {\n        horizontal: data.distance,\n        vertical: data.distance\n      } : deepExtend({}, data.distance);\n    }\n    if (data.drift !== undefined) {\n      this.drift = setRangeValue(data.drift);\n    }\n    if (data.enable !== undefined) {\n      this.enable = data.enable;\n    }\n    this.gravity.load(data.gravity);\n    const outMode = (_a = data.outMode) !== null && _a !== void 0 ? _a : data.out_mode;\n    if (data.outModes !== undefined || outMode !== undefined) {\n      if (typeof data.outModes === \"string\" || data.outModes === undefined && outMode !== undefined) {\n        this.outModes.load({\n          default: (_b = data.outModes) !== null && _b !== void 0 ? _b : outMode\n        });\n      } else {\n        this.outModes.load(data.outModes);\n      }\n    }\n    this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n    if (data.random !== undefined) {\n      this.random = data.random;\n    }\n    if (data.size !== undefined) {\n      this.size = data.size;\n    }\n    if (data.speed !== undefined) {\n      this.speed = setRangeValue(data.speed);\n    }\n    this.spin.load(data.spin);\n    if (data.straight !== undefined) {\n      this.straight = data.straight;\n    }\n    this.trail.load(data.trail);\n    if (data.vibrate !== undefined) {\n      this.vibrate = data.vibrate;\n    }\n    if (data.warp !== undefined) {\n      this.warp = data.warp;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}