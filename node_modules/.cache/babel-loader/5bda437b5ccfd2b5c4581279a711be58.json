{"ast":null,"code":"import { clear, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, gradient, paintBase } from \"../Utils/CanvasUtils\";\nimport { colorToHsl, colorToRgb, getStyleFromHsl, getStyleFromRgb } from \"../Utils/ColorUtils\";\nimport { Constants } from \"./Utils/Constants\";\nimport { deepExtend } from \"../Utils/Utils\";\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n  init() {\n    this.resize();\n    this.initStyle();\n    this.initCover();\n    this.initTrail();\n    this.initBackground();\n    this.paint();\n  }\n  loadCanvas(canvas) {\n    var _a;\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this.generatedCanvas = canvas.dataset && Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n  destroy() {\n    var _a;\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        this.paintBase(this.coverColorStyle);\n      } else {\n        this.paintBase();\n      }\n    });\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n    this.resize();\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n  resize() {\n    if (!this.element) {\n      return;\n    }\n    const container = this.container,\n      pxRatio = container.retina.pixelRatio,\n      size = container.canvas.size,\n      newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n  drawConnectLine(p1, p2) {\n    this.draw(ctx => {\n      var _a;\n      const lineStyle = this.lineStyle(p1, p2);\n      if (!lineStyle) {\n        return;\n      }\n      const pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n      drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    });\n  }\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    const container = this.container;\n    this.draw(ctx => {\n      var _a;\n      const beginPos = particle.getPosition();\n      drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n  }\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius();\n    if (radius <= 0) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n    if (!pfColor && !psColor) {\n      return;\n    }\n    let [fColor, sColor] = this.getPluginParticleColors(particle);\n    if (!fColor || !sColor) {\n      if (!fColor) {\n        fColor = pfColor ? pfColor : undefined;\n      }\n      if (!sColor) {\n        sColor = psColor ? psColor : undefined;\n      }\n    }\n    const options = this.container.actualOptions,\n      zIndexOptions = particle.options.zIndex,\n      zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n      opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1,\n      strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity,\n      zOpacity = opacity * zOpacityFactor,\n      zStrokeOpacity = strokeOpacity * zOpacityFactor;\n    const colorStyles = {\n      fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n    };\n    colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n    this.draw(ctx => {\n      const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        container = this.container;\n      for (const updater of container.particles.updaters) {\n        if (updater.beforeDraw) {\n          updater.beforeDraw(particle);\n        }\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n      }\n      drawParticle(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n      for (const updater of container.particles.updaters) {\n        if (updater.afterDraw) {\n          updater.afterDraw(particle);\n        }\n      }\n    });\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element,\n      elementStyle = element === null || element === void 0 ? void 0 : element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = colorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  draw(cb) {\n    if (!this.context) {\n      return;\n    }\n    return cb(this.context);\n  }\n  initCover() {\n    const options = this.container.actualOptions,\n      cover = options.backgroundMask.cover,\n      color = cover.color,\n      coverRgb = colorToRgb(color);\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n  initTrail() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      fillColor = colorToRgb(trail.fillColor);\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this.trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n  getPluginParticleColors(particle) {\n    let fColor, sColor;\n    for (const [, plugin] of this.container.plugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = colorToHsl(plugin.particleFillColor(particle));\n      }\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = colorToHsl(plugin.particleStrokeColor(particle));\n      }\n      if (fColor && sColor) {\n        break;\n      }\n    }\n    return [fColor, sColor];\n  }\n  initStyle() {\n    const element = this.element,\n      options = this.container.actualOptions;\n    if (!element) {\n      return;\n    }\n    const originalStyle = this.originalStyle;\n    if (options.fullScreen.enable) {\n      this.originalStyle = deepExtend({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else if (originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n      const value = options.style[key];\n      if (!value) {\n        continue;\n      }\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n  paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n  lineStyle(p1, p2) {\n    return this.draw(ctx => {\n      const options = this.container.actualOptions,\n        connectOptions = options.interactivity.modes.connect;\n      return gradient(ctx, p1, p2, connectOptions.links.opacity);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}